создадим виртуальное окружение под именем myvenv
    sergei@sergei-Lenovo-C360:~/anwblog$ python3 -m venv myvenv
команда создаст директорию myvenv (или другую, в зависимости от выбранного имени), которая будет содержать виртуальное окружение (по сути -- набор файлов и папок).
команда python будет автоматически обращаться к правильной версии языка, так что не обязательно использовать python3


активировать виртуальное окружение:
    sergei@sergei-Lenovo-C360:~$ source .virtualenvs/myvenv/bin/activate
(virtsite) sergei@sergei-Lenovo-C360:~$
Чтобы выйти из виртуального окружения введите команду 
    sergei@sergei-Lenovo-C360:~$ deactivate
удалить
    sergei@sergei-Lenovo-C360:~$ rmvirtualenv myvenv
    


установили django==1.8 в myvenv
    (myvenv) sergei@sergei-Lenovo-C360:~/anwblog$ pip install django==1.8
создать новый проект Django
django-admin.py это скрипт, который создаст необходимую структуру директорий и файлы для нас.
точка в конце обязательно , это указание на текущий каталог
    (myvenv) sergei@sergei-Lenovo-C360:~/anwblog$ django-admin startproject mysite .
anwblog
├── manage.py       — отвечает за управление проектом, например, командой python 
                      (manage.py runserver можно запустить сервер для тестовой разработки.)
└── amysite
    ├── __init__.py — нужен для того, чтобы python рассматривал каталог pySite как пакет.
    ├── settings.py — файл настроек проекта: настройки языка, часового пояса, соединения с базой данных,
                      подключаемых приложений и прочего.
    ├── urls.py     — настройки URL-адресов для сайта
    └── wsgi.py     — конфигурация модуля wsgi для веб-сервера
/home/sergei/anwblog/mysite/settings.py
TIME_ZONE = 'Asia/Bangkok'
STATIC_ROOT = os.path.join(BASE_DIR, 'static') добавить в конце
создать базу данных
    (myvenv) sergei@sergei-Lenovo-C360:~/anwblog$ python manage.py migrate
запустить веб-сервер и посмотреть работает ли
    (myvenv) sergei@sergei-Lenovo-C360:~/anwblog$ python manage.py runserver
ООП
что такое запись в блоге? Какие свойства она имеет?
-запись содержит какой-то текст и заголовок
-кто её написал -- так что нам нужен автор
-когда запись создана
-когда опубликована.
Post
--------
title
text
author
created_date
published_date
-нужен метод для её публикации    publish
Зная, что представляет из себя объект, мы можем создать Django модель для записи в блоге
Модель в Django это объект определенного свойства - он хранится в базе данных
представить модель в базе данных как электронную таблицу с колонками (полями) и строками (данными)
создадим отдельное приложение в нашем проекте
    (myvenv) sergei@sergei-Lenovo-C360:~/anwblog$ python manage.py startapp blog
├── mysite
|       __init__.py
|       settings.py
|       urls.py
|       wsgi.py
├── manage.py
└── blog
    ├── migrations
    |       __init__.py
    ├── __init__.py
    ├── admin.py
    ├── models.py
    ├── tests.py
    └── views.py
добавить к списку 'blog' /home/sergei/anwblog/mysite/settings.py   INSTALLED_APPS

Создание модели записи в блоге /home/sergei/anwblog/blog/models.py
-class Post(models.Model): -- эта строка определяет нашу модель (объект).
-Post это имя нашей модели, мы можем поменять его при желании. Всегда начинай имена классов с прописной буквы.
-(from django.db import models)models.Model означает, что объект Post является моделью Django, так Django поймет, что он должен сохранить его в базу данных.
-Дальше мы задаем свойства, о которых уже говорили: title, text, created_date, published_date и author. Чтобы это сделать нам нужно определиться с типом полей (это текст? число? дата? ссылка на другой объект? например, на пользователя?).
-models.CharField -- так мы определяем текстовое поле с ограничением на количество символов.
-models.TextField -- так определяется поле для неограниченно длинного текста.
-models.DateTimeField -- дата и время.
-models.ForeignKey -- ссылка на другую модель.
-def publish(self): метод публикации для записи
-publish — название этого метода. Можно изменить имя метода
-__str__() получим текст (строку) с заголовком записи
для меня
-models.CharField -- выбор файла для просмотра
-models.TextField -- просмотр файла
-models.DateTimeField -- дата и время получения файла
-models.ForeignKey -- ссылка на другую модель.
сначала дать Django знать, что сделали изменения в нашей модели
    (myvenv) sergei@sergei-Lenovo-C360:~/anwblog$ python manage.py makemigrations blog
Создаем таблицы моделей в базе данных. добавление модели в базу данных
    (myvenv) sergei@sergei-Lenovo-C360:~/anwblog$ python manage.py migrate blog
Администрирование Django        /home/sergei/anwblog/blog/admin.py
from django.contrib import admin
from .models import Post           импортировали (включили) модель Post
admin.site.register(Post)          зарегистрировали модель Post
импортировали (включили) модель Post, которая была определена. /home/sergei/anwblog/blog/models.py  -class Post(models.Model)
Чтобы наша модель стала доступна на странице администрирования, нам нужно зарегистрировать её при помощи admin.site.register(Post)
создать суперпользователя  (myvenv) sergei@sergei-Lenovo-C360:~/anwblog$ python manage.py createsuperuser
Username (leave blank to use 'sergei'): sergei
Email address: s.chichin@gmail.com
URL-адрес сайта   /home/sergei/anwblog/mysite/urls.py
from django.conf.urls import include, url
from django.contrib import admin
urlpatterns = [
    url(r'^admin/', include(admin.site.urls)),
    url(r'', include('blog.urls')),  главный URL 
]
Django будет перенаправлять все запросы 'http://127.0.0.1:8000/' к blog.urls и искать там дальнейшие инструкции.
blog.urls    новый пустой файл          /home/sergei/anwblog/blog/urls.py
from django.conf.urls import url  
from . import views         все методы views (представления) из приложения blog
urlpatterns = [
    url(r'^$', views.post_list, name='post_list'),
]
-связали view под именем post_list с URL-адресом ^$. т.е. пустой строке. потому что для обработчиков URL в Django 'http://127.0.0.1:8000/' не является частью URL. Этот шаблон скажет Django, что views.post_list — это правильное направление для запроса к твоему веб-сайту по адресу 'http://127.0.0.1:8000/'.
-name='post_list' — это имя URL, которое будет использовано чтобы идентифицировать его
Представления в Django   view запросит информацию из модели и передаст её в шаблон
view это то место, где мы разместим "логику" работы нашего приложения. Оно запросит информацию из модели, которую мы создали ранее, и передаст её в шаблон. Шаблонами мы займёмся в следующей главе. Представления похожи на методы в Python и лишь немногим сложнее
/home/sergei/anwblog/blog/views.py
from django.shortcuts import render
def post_list(request):
    return render(request, 'blog/post_list.html', {})
мы создали метод (def) с именем post_list, который принимает в request в качестве аргумента и return (возвращает) результат работы метода render, который соберет наш шаблон страницы blog/post_list.html.
создание файла шаблона
blog
└───templates
    └───blog
зачем нам нужны две директории с одинаковым названием blog, это просто удобное соглашение об именовании
создай файл post_list.html (для начала оставь его пустым) внутри директории blog/templates/blog
перезагрузить сервер, чистый лист, потому, что шаблон чистый лист
<html>
    <p>Hi there!</p>
    <p>It works!</p>
</html>
работает
Head & body
Каждая HTML-страница также делится на два элемента: head и body.
head -- это элемент, содержащий информацию о документе, которая не отображается на экране.
body -- это элемент, который содержит все, что будет отражено на веб-странице.
Мы используем тег <head> чтобы сообщить браузеру о настройках страницы 
и тег <body> - о её содержимом.
<html>
        <head>
            <title>mysite's blog</title>  не отображается на экране, но в заголовке окна
        </head>
        <body>
            <p>Hi there!</p>
            <p>It works!</p>
        </body>
    </html>
Django ORM и QuerySet
QuerySet, по сути, список объектов заданной Модели. QuerySet позволяет читать данные из базы данных, фильтровать и изменять их порядок.
Динамически изменяющиеся данные в шаблонах    представления: соединять между собой модели и шаблоны
-взять определенный контент (модели, сохраненные в базе данных) и отобразить их в шаблоне
-Для этого и предназначены представления: соединять между собой модели и шаблоны. В post_list представлениям нужно будет взять модели, которые мы хотим отобразить и передать их шаблону. 
-в представлениях мы определяем что (какая модель) будет отображена в шаблоне.
/home/sergei/anwblog/blog/views.py     добавили   from .models import Post
Чтобы получить реальную запись из модели Post, нам нужен QuerySet
Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')   -список записей блога, отсортированных по published_date
-мы создали переменную для QuerySet: posts. Можешь думать о ней как об имени для нашего QuerySet. Теперь мы можем обращаться к нему, используя имя.
-Кроме того, код использует функцию timezone.now(), так что нужно также импортировать timezone.
-Нам осталось передать QuerySet posts в шаблон
from django.shortcuts import render
from django.utils import timezone
from .models import Post
def post_list(request):
    posts = Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')
    return render(request, 'blog/post_list.html', {'posts': posts})
-В функции render мы уже имеем параметр request (т.е. все что мы получим от пользователя в качестве запроса через Интернет) и 
-файл шаблона 'blog/post_list.html'. 
-параметр, который выглядит как {}, это место, куда мы можем добавить что-нибудь для использования в шаблоне. 
-Мы должны задавать имена, передаваемым шаблону вещам
-параметр будет выглядеть следующим образом: {'posts': posts}. часть перед : является строкой; её нужно обернуть в кавычки ''.
-перейти к шаблону и отобразить QuerySet на странице
Шаблоны Django   Теги шаблонов Django позволяют нам вставлять Python в HTML      {{ posts }}
-при помощи встроенных тегов шаблонов.
Чтобы вставить переменную в шаблон Django, нам нужно использовать двойные фигурные скобочки с именем переменной внутри:    {{ posts }}
-аккуратно отобразить список циклом for! В шаблонах Django использовать их таким образом:
    {% for post in posts %}
        {{ post }}
    {% endfor %}
-смешивать HTML и теги шаблонов. элемент body будет выглядеть следующим образом:
<div>
        <h1><a href="/">Django Blog</a></h1>
    </div>

    {% for post in posts %}
        <div>
            <p>published: {{ post.published_date }}</p>
            <h1><a href="">{{ post.title }}</a></h1>
            <p>{{ post.text|linebreaksbr }}</p>
        </div>
    {% endfor %}
-Всё что ты поместишь между {% for %} и {% endfor %} будет повторено для каждого объекта в списке
-использовали немного другую запись в этот раз {{ post.title }} или {{ post.text }}
-обращаемся к различным полям нашей модели Post. 
-Также |linebreaksbr прогоняет текст через фильтр, для преобразования переносов строк в параграфы.












